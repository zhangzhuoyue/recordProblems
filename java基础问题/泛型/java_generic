### 泛型

1. 定义 
    ```
    1. 通用性：泛型就是编写模板代码来适应任意类型，增加了代码的重用性
    2. 安全性：泛型的好处是使用时不必对类型进行强制转换，它通过编译器对类型进行检查；只要在编译时期没有出现警告，那么运行时期就不会出现ClassCastException异常
    3. 注意泛型的继承关系：可以把ArrayList<Integer>向上转型为List<Integer>（T不能变！）【但是泛型中类型不能变】，但不能把ArrayList<Integer>向上转型为ArrayList<Number>（T不能变成父类）。
    ``` 
   
2. 泛型将运行期问题提前到编译器
    ```
   1. jdk1.5之前，集合中可以装配任意的对象类型，取出这样的对象只能用Object对象接受，但是当要明确其类型时，必须强制转换，而且强制转换的错误只能在
   运行期才能发现。
   2. jdk1.5新特性泛型彻底解决了这样的问题。
      泛型规定一个类只能装什么，取出时也无需强制转换，如果放入的对象不是限定的类型，在编译器就会报错。
   ```
    1. 什么是编译器，什么是运行期 ？？？？？？

3. 泛型的向上转型
    ```
   1. 泛型子类可以向上转型为泛型父类，他的形式如下，例如：List<T>的子类ArrayList<T>
        public class ArrayList<T> implements List<T> {
            ...
        }
   2. 特别注意：ArrayList<Integer>和ArrayList<Number>两者完全没有继承关系。不能将ArrayList<Integer>向上转型为ArrayList<Number>

   ```

4. 使用泛型
   ```
   1. 泛型使用：把泛型参数<T>替换为需要的class类型，例如：ArrayList<String>，ArrayList<Number>等；

   2. 泛型推断：可以省略编译器能自动推断出的类型，例如：List<String> list = new ArrayList<>();；

   3. 不指定泛型：编译器会给出警告，且只能将<T>视为Object类型；

   4. 接口定义泛型：可以在接口中定义泛型类型，实现此接口的类必须实现正确的泛型类型。

   5. 泛型的使用案例：Collections.sort() 的排序 ，要手写一遍  #########################
   ```

5. 编写泛型
    ```
    1. 编写泛型时，需要定义泛型类型<T>
        1. 泛型类一般用在集合类【模板类】,如果编写泛型类，则先搞清楚类中那些事可变的，那些是不变的。
        public class Persion<T>{

            public T o1;
            public T o2;

            public void setO1(T t){
               this.o1 = t;
            }
            public T getO1(){
                return o1;
            }
        }

    2. 静态方法
        注意：
           1. 编写泛型类时，要特别注意，泛型类型<T>不能用于静态方法
           2. public class Pair<T> {
                  private T first;
                  public Pair(T first, T last) {
                      this.first = first;
                  }
                  public T getFirst() { ... }

                      // 静态方法使用<T>: 编译无法通过
                      public static Pair<T> create(T first, T last) {
                          return new Pair<T>(first, last);
                      }

                      // 可以编译通过: 添加<T>;添加<T>后是另外一种泛型
                      public static <T> Pair<T> create(T first, T last) {
                          return new Pair<T>(first, last);
                      }
              }

    泛型可以同时定义多种类型，例如Map<K, V>
    ```
























































































